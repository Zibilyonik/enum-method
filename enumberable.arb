module Enumerable
  def my_each
    return enum_for unless block_given?

    for item in self do
      yield item
    end
  end

  def my_each_with_index
    return enum_for unless block_given?

    for item in self do
      yield(item, index(item))
    end
  end

  def my_select
    return enum_for unless block_given?

    arr = []
    for item in self do
      arr << item if yield(item)
    end
    arr
  end

  def my_all?
    return null if length <= 0
    return false if my_select { |item| yield(item) }.length != length

    true
  end

  def my_any?
    return null if self.length <= 0
    return false if my_select { |item| yield(item) }.empty?

    true
  end
  
  def my_none?
    return null if length <= 0
    return true if my_select { |item| yield(item) }.empty?
    
    false
  end

  def my_count(number = nil)
    if number != nil
      i = 0
      for item in self do
        if item == number
          i += 1
        end
      end
      return i
    end
    return self.length unless block_given?
    return my_select { |x| yield(x) }.length
  end

  def my_inject(*args)
    if args[0].is_a?(Symbol)
      sym = args[0]
      args.delete_at(0)
    elsif args[1].is_a?(Symbol)
      sym = args[1]
      args.delete_at(1)
    end
    args[0] ? memo = args[0] : memo = 0
    if sym
      my_each { |item| memo = memo ? memo.send(sym, item) : item }
    elsif block_given?
      my_each { |item| memo = yield(memo, item) }
    end
    memo
  end

  def my_map(proc = nil)
    return enum_for unless block_given?

    fin = []
    if proc
      my_each { |x| fin << proc.call(x) }
    else
      my_each { |x| fin << yield(x) }
    end
    fin
  end

  def multiply_els
    my_inject(:*, 1)
  end
end


Arr = [20, 50, 120, 600, 21]
Arr2 = ["a", "b", "c", "d", "e"]
Arr.my_each{|x| p x + 5}
p Arr.my_each{|x| x+5}
Arr.my_each_with_index{|x, i| p "number: #{x+5}, index: #{i}"}
p Arr.my_select{|x| x.even?}
p Arr.my_all?{|x| x.even?}
p Arr.my_any?{|x| x < 100}
p Arr.my_none?{|x| x < 20}
p Arr.my_count{|x| x % 3 == 2}
p Arr.my_inject(:*, 5)
p Arr.my_map{|x| x+5}
p Arr2.my_map{|x| x.upcase}
p Arr.multiply_els

